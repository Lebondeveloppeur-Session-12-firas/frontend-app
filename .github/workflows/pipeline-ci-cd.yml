# ✅ Name of the Workflow
name: Pipeline CI/CD Frontend-api

# ✅ Trigger this workflow on push to main branch (Déclencher ce workflow lors d'une poussée vers la branche principale)
on:
  push: 
    branches:
      - main

# ✅ Global Environment Variables
env:
  BUILD_NUMBER: ${{ github.run_number }}  # Unique build number for the pipeline run
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/frontend-app:${{ github.run_number }}
  BACKEND_URL: "https://api.53.lebondeveloppeur.net"

jobs:
  # ✅ Run Unit Tests
  unit-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test


  # ✅ Build and Push Docker Image
  build-and-push-job:
    runs-on: ubuntu-latest
    needs: [unit-test-job]  # Wait for unit tests
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Display VITE_API_URL value
        run: echo "VITE_API_URL=${{ vars.VITE_API_URL }}"

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} . --build-arg VITE_API_URL=${{ vars.VITE_API_URL }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image 
        run: docker push ${{ env.IMAGE_NAME }}

  # ✅ Deploy to VPS
  deploy-job:
    runs-on: ubuntu-latest
    needs: build-and-push-job  
    steps:
      - name: Connect to the VPS using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |

            sudo docker pull ${{ env.IMAGE_NAME }}

            # Remove the old container if it exists
            sudo docker ps -q --filter name=frontend-app | grep -q . && sudo docker rm -f frontend-app || echo "No existing container to remove"

            # Run the new container with environment variables
            sudo docker run -d \
              --name frontend-app \
              -p 3000:80 \
              --restart=always \
              ${{ env.IMAGE_NAME }}
